'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ListPlugin = require('./ListPlugin.utility');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ListPlugin = function () {
	function ListPlugin() {
		_classCallCheck(this, ListPlugin);

		this.lists = {};
	}
	// Tracks `<List/>`s.


	_createClass(ListPlugin, [{
		key: 'initContext',
		value: function initContext(context) {
			var _this = this;

			context.onRegisterList = function (name, _ref) {
				var onReset = _ref.onReset;

				_this.lists[name] = { onReset: onReset };
			};
		}
	}, {
		key: 'getValues',
		value: function getValues(values) {
			// In `values`, replace all entries having keys `${list}:${index}:${field}`
			// with a single `${list}` entry being an array of objects with keys `${field}`.
			return (0, _ListPlugin.convertListValues)(values);
		}
	}, {
		key: 'getValue',
		value: function getValue(values, key) {
			return (0, _ListPlugin.getListValue)(values, key);
		}
	}, {
		key: 'onResetField',
		value: function onResetField(name, form) {
			if (this.lists[name]) {
				var fields = form.state.fields;

				for (var _iterator = Object.keys(fields), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
					var _ref2;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref2 = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref2 = _i.value;
					}

					var field = _ref2;

					if (field.indexOf(name + ':') === 0) {
						form.resetField(field);
					}
				}
				this.lists[name].onReset();
				return true;
			}
		}
	}]);

	return ListPlugin;
}();

exports.default = ListPlugin;
//# sourceMappingURL=ListPlugin.js.map