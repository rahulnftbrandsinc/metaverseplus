{"version":3,"sources":["../source/utility.js"],"names":["getPassThroughProps","scrollTo","getValues","getValue","getNext","NOT_FOUND","props","excludeProps","rest","Object","keys","property","node","options","scrollMode","behavior","block","inline","duration","values","fields","nonRemovedFieldValues","key","MAX_SAFE_INTEGER","Number","Math","pow","counter"],"mappings":";;;;;;QAIgBA,mB,GAAAA,mB;QAUAC,Q,GAAAA,Q;QA+BAC,S,GAAAA,S;QAUAC,Q,GAAAA,Q;QAMAC,O,GAAAA,O;;AA7DhB;;;;;;AAEO,IAAMC,gCAAY,EAAlB;;AAEA,SAASL,mBAAT,CAA6BM,KAA7B,EAAoCC,YAApC,EAAkD;AACxD,KAAMC,OAAO,EAAb;AACA,sBAAuBC,OAAOC,IAAP,CAAYJ,KAAZ,CAAvB,kHAA2C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,MAAhCK,QAAgC;;AAC1C,MAAI,CAACJ,aAAaI,QAAb,CAAL,EAA6B;AAC5BH,QAAKG,QAAL,IAAiBL,MAAMK,QAAN,CAAjB;AACA;AACD;AACD,QAAOH,IAAP;AACA;;AAEM,SAASP,QAAT,CAAkBW,IAAlB,EAAwBC,OAAxB,EAAiC;AACvC;AACA;AACA;AACA;AACA;AACA,uCAAeD,IAAf,EAAqB;AACpBE,cAAY,WADQ;AAEpBC,YAAU,QAFU;AAGpBC,SAAO,QAHa;AAIpBC,UAAQ,SAJY;AAKpBC,YAAUL,WAAWA,QAAQK;AALT,EAArB;AAOA;;AAED;;;;;;;;;;;;;;;;AAgBO,SAAShB,SAAT,CAAmBiB,MAAnB,EAA2BC,MAA3B,EAAmC;AACzC,KAAMC,wBAAwB,EAA9B;AACA,uBAAkBZ,OAAOC,IAAP,CAAYS,MAAZ,CAAlB,yHAAuC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,MAA5BG,GAA4B;;AACtC,MAAIF,OAAOE,GAAP,CAAJ,EAAiB;AAChBD,yBAAsBC,GAAtB,IAA6BH,OAAOG,GAAP,CAA7B;AACA;AACD;AACD,QAAOD,qBAAP;AACA;;AAEM,SAASlB,QAAT,CAAkBgB,MAAlB,EAA0BG,GAA1B,EAA+B;AACrC,QAAOH,OAAOG,GAAP,CAAP;AACA;;AAED;AACA,IAAMC,mBAAmBC,OAAOD,gBAAP,IAA2BE,KAAKC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAApD;AACO,SAAStB,OAAT,CAAiBuB,OAAjB,EAA0B;AAChC,KAAIA,UAAUJ,gBAAd,EAAgC;AAC/B,SAAOI,UAAU,CAAjB;AACA,EAFD,MAEO;AACN,SAAO,CAAP;AACA;AACD","file":"utility.js","sourcesContent":["import scrollIntoView from 'scroll-into-view-if-needed'\r\n\r\nexport const NOT_FOUND = {}\r\n\r\nexport function getPassThroughProps(props, excludeProps) {\r\n\tconst rest = {}\r\n\tfor (const property of Object.keys(props)) {\r\n\t\tif (!excludeProps[property]) {\r\n\t\t\trest[property] = props[property]\r\n\t\t}\r\n\t}\r\n\treturn rest\r\n}\r\n\r\nexport function scrollTo(node, options) {\r\n\t// https://github.com/stipsan/scroll-into-view-if-needed/issues/359\r\n\t// scrollIntoView(ReactDOM.findDOMNode(this.field.current), false, { duration: 300 })\r\n\t// Using `block: \"center\"` instead of `block: \"nearest\"`\r\n\t// because otherwise the `node` might be obstructed by a \"floating\" header.\r\n\t// https://github.com/stipsan/scroll-into-view-if-needed/issues/126#issuecomment-533089870\r\n\tscrollIntoView(node, {\r\n\t\tscrollMode: 'if-needed',\r\n\t\tbehavior: 'smooth',\r\n\t\tblock: 'center',\r\n\t\tinline: 'nearest',\r\n\t\tduration: options && options.duration\r\n\t})\r\n}\r\n\r\n/**\r\n * Selects only the values for non-removed fields:\r\n * removes fields thats have `0` field counter.\r\n *\r\n * Filters `values` object to contain only the \"registered\" fields' entries.\r\n * Because if a field is \"unregistered\", it means that the React element\r\n * was removed in the process, and therefore that field's entry shouldn't\r\n * exist in the returned `values` object.\r\n *\r\n * Values for \"unregistered\" fields don't get cleared from form's `values` by default\r\n * because of how React rendering works with unmounting and then re-mounted elements.\r\n *\r\n * @param  {object} values\r\n * @param  {object} fields\r\n * @return {object}\r\n */\r\nexport function getValues(values, fields) {\r\n\tconst nonRemovedFieldValues = {}\r\n\tfor (const key of Object.keys(values)) {\r\n\t\tif (fields[key]) {\r\n\t\t\tnonRemovedFieldValues[key] = values[key]\r\n\t\t}\r\n\t}\r\n\treturn nonRemovedFieldValues\r\n}\r\n\r\nexport function getValue(values, key) {\r\n\treturn values[key]\r\n}\r\n\r\n// `MAX_SAFE_INTEGER` is not supported by older browsers\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53)\r\nexport function getNext(counter) {\r\n\tif (counter < MAX_SAFE_INTEGER) {\r\n\t\treturn counter + 1\r\n\t} else {\r\n\t\treturn 0\r\n\t}\r\n}"]}