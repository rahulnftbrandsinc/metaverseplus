'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.NOT_FOUND = undefined;
exports.getPassThroughProps = getPassThroughProps;
exports.scrollTo = scrollTo;
exports.getValues = getValues;
exports.getValue = getValue;
exports.getNext = getNext;

var _scrollIntoViewIfNeeded = require('scroll-into-view-if-needed');

var _scrollIntoViewIfNeeded2 = _interopRequireDefault(_scrollIntoViewIfNeeded);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NOT_FOUND = exports.NOT_FOUND = {};

function getPassThroughProps(props, excludeProps) {
	var rest = {};
	for (var _iterator = Object.keys(props), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		var _ref;

		if (_isArray) {
			if (_i >= _iterator.length) break;
			_ref = _iterator[_i++];
		} else {
			_i = _iterator.next();
			if (_i.done) break;
			_ref = _i.value;
		}

		var property = _ref;

		if (!excludeProps[property]) {
			rest[property] = props[property];
		}
	}
	return rest;
}

function scrollTo(node, options) {
	// https://github.com/stipsan/scroll-into-view-if-needed/issues/359
	// scrollIntoView(ReactDOM.findDOMNode(this.field.current), false, { duration: 300 })
	// Using `block: "center"` instead of `block: "nearest"`
	// because otherwise the `node` might be obstructed by a "floating" header.
	// https://github.com/stipsan/scroll-into-view-if-needed/issues/126#issuecomment-533089870
	(0, _scrollIntoViewIfNeeded2.default)(node, {
		scrollMode: 'if-needed',
		behavior: 'smooth',
		block: 'center',
		inline: 'nearest',
		duration: options && options.duration
	});
}

/**
 * Selects only the values for non-removed fields:
 * removes fields thats have `0` field counter.
 *
 * Filters `values` object to contain only the "registered" fields' entries.
 * Because if a field is "unregistered", it means that the React element
 * was removed in the process, and therefore that field's entry shouldn't
 * exist in the returned `values` object.
 *
 * Values for "unregistered" fields don't get cleared from form's `values` by default
 * because of how React rendering works with unmounting and then re-mounted elements.
 *
 * @param  {object} values
 * @param  {object} fields
 * @return {object}
 */
function getValues(values, fields) {
	var nonRemovedFieldValues = {};
	for (var _iterator2 = Object.keys(values), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
		var _ref2;

		if (_isArray2) {
			if (_i2 >= _iterator2.length) break;
			_ref2 = _iterator2[_i2++];
		} else {
			_i2 = _iterator2.next();
			if (_i2.done) break;
			_ref2 = _i2.value;
		}

		var key = _ref2;

		if (fields[key]) {
			nonRemovedFieldValues[key] = values[key];
		}
	}
	return nonRemovedFieldValues;
}

function getValue(values, key) {
	return values[key];
}

// `MAX_SAFE_INTEGER` is not supported by older browsers
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53);
function getNext(counter) {
	if (counter < MAX_SAFE_INTEGER) {
		return counter + 1;
	} else {
		return 0;
	}
}
//# sourceMappingURL=utility.js.map