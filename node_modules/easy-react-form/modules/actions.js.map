{"version":3,"sources":["../source/actions.js"],"names":["registerField","field","value","validate","error","state","fields","undefined","values","validationErrors","errors","showErrors","unregisterField","setFieldValue","setFieldError","Boolean","setFieldValidationError","fieldFocused","latestFocusedField","setFormSubmitting","submitting","showFieldError","removeField"],"mappings":";;;;;AAAO,IAAMA,wCAAgB,SAAhBA,aAAgB;AAAA,KAAGC,KAAH,QAAGA,KAAH;AAAA,KAAUC,KAAV,QAAUA,KAAV;AAAA,KAAiBC,QAAjB,QAAiBA,QAAjB;AAAA,KAA2BC,KAA3B,QAA2BA,KAA3B;AAAA,QAAuC,iBACpE;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIC,MAAMC,MAAN,CAAaL,KAAb,MAAwBM,SAA5B,EACA;AACCF,SAAMC,MAAN,CAAaL,KAAb,IAAsB,CAAtB;;AAEA;AACA;AACAI,SAAMG,MAAN,CAAaP,KAAb,IAAsBC,KAAtB;AACAG,SAAMI,gBAAN,CAAuBR,KAAvB,IAAgCE,SAASD,KAAT,CAAhC;;AAEA,OAAIE,KAAJ,EAAW;AACVC,UAAMK,MAAN,CAAaT,KAAb,IAAsBG,KAAtB;AACAC,UAAMM,UAAN,CAAiBV,KAAjB,IAA0B,IAA1B;AACA;AACD,GAbD,MAeA;AACCI,SAAMC,MAAN,CAAaL,KAAb;AACA;AACD,EA9B4B;AAAA,CAAtB;;AAgCA,IAAMW,4CAAkB,SAAlBA,eAAkB,CAACX,KAAD;AAAA,QAAW,iBAC1C;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,QAAMC,MAAN,CAAaL,KAAb;AACA,EAX8B;AAAA,CAAxB;;AAaP;AACA;AACO,IAAMY,wCAAgB,SAAhBA,aAAgB,CAACZ,KAAD,EAAQC,KAAR;AAAA,QAAkB,iBAC/C;AACCG,QAAMG,MAAN,CAAaP,KAAb,IAAsBC,KAAtB;AACA,EAH4B;AAAA,CAAtB;;AAKP;AACO,IAAMY,wCAAgB,SAAhBA,aAAgB,CAACb,KAAD,EAAQG,KAAR;AAAA,QAAkB,iBAC/C;AACCC,QAAMK,MAAN,CAAaT,KAAb,IAAsBG,KAAtB;AACAC,QAAMM,UAAN,CAAiBV,KAAjB,IAA0Bc,QAAQV,MAAMI,gBAAN,CAAuBR,KAAvB,KAAiCI,MAAMK,MAAN,CAAaT,KAAb,CAAzC,CAA1B;AACA,EAJ4B;AAAA,CAAtB;;AAMP;AACO,IAAMe,4DAA0B,SAA1BA,uBAA0B,CAACf,KAAD,EAAQG,KAAR;AAAA,QAAkB,iBACzD;AACCC,QAAMI,gBAAN,CAAuBR,KAAvB,IAAgCG,KAAhC;AACAC,QAAMM,UAAN,CAAiBV,KAAjB,IAA0Bc,QAAQV,MAAMI,gBAAN,CAAuBR,KAAvB,KAAiCI,MAAMK,MAAN,CAAaT,KAAb,CAAzC,CAA1B;AACA,EAJsC;AAAA,CAAhC;;AAMA,IAAMgB,sCAAe,SAAfA,YAAe,CAAChB,KAAD;AAAA,QAAW,iBACvC;AACCI,QAAMa,kBAAN,GAA2BjB,KAA3B;AACA,EAH2B;AAAA,CAArB;;AAKA,IAAMkB,gDAAoB,SAApBA,iBAAoB,CAACC,UAAD;AAAA,QAAgB,iBACjD;AACCf,QAAMe,UAAN,GAAmBA,UAAnB;AACA,EAHgC;AAAA,CAA1B;;AAKA,IAAMC,0CAAiB,SAAjBA,cAAiB,CAACpB,KAAD;AAAA,QAAW,iBACzC;AACCI,QAAMM,UAAN,CAAiBV,KAAjB,IAA0B,IAA1B;AACA,EAH6B;AAAA,CAAvB;;AAKA,IAAMqB,oCAAc,SAAdA,WAAc,CAACrB,KAAD;AAAA,QAAW,iBAAS;AAC9C,SAAOI,MAAMC,MAAN,CAAaL,KAAb,CAAP;AACA,SAAOI,MAAMG,MAAN,CAAaP,KAAb,CAAP;AACA,SAAOI,MAAMK,MAAN,CAAaT,KAAb,CAAP;AACA,SAAOI,MAAMI,gBAAN,CAAuBR,KAAvB,CAAP;AACA,SAAOI,MAAMM,UAAN,CAAiBV,KAAjB,CAAP;AACA,MAAII,MAAMa,kBAAN,KAA6BjB,KAAjC,EAAwC;AACvCI,SAAMa,kBAAN,GAA2BX,SAA3B;AACA;AACD,EAT0B;AAAA,CAApB","file":"actions.js","sourcesContent":["export const registerField = ({ field, value, validate, error }) => state =>\r\n{\r\n\t// Uses a numerical counter instead of a boolean.\r\n\t// https://github.com/erikras/redux-form/issues/1705\r\n\t// If the value is `0` then it means that the field\r\n\t// has been previously initialized so not reinitializing it.\r\n\t// This also preserves the initial value of the field.\r\n\t// Because a user may choose some value which would result in\r\n\t// a couple of new form fields to appear above this field,\r\n\t// and so React unmounts this field only to later mount it again\r\n\t// a couple of new form fields lower.\r\n\t// So this trick retains the field's state (including value).\r\n\tif (state.fields[field] === undefined)\r\n\t{\r\n\t\tstate.fields[field] = 1\r\n\r\n\t\t// Only initializes the field with its default `value`\r\n\t\t// if it hasn't been seen before.\r\n\t\tstate.values[field] = value\r\n\t\tstate.validationErrors[field] = validate(value)\r\n\r\n\t\tif (error) {\r\n\t\t\tstate.errors[field] = error\r\n\t\t\tstate.showErrors[field] = true\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tstate.fields[field]++\r\n\t}\r\n}\r\n\r\nexport const unregisterField = (field) => state =>\r\n{\r\n\t// Uses a numerical counter instead of a boolean.\r\n\t// https://github.com/erikras/redux-form/issues/1705\r\n\t// Even if the registration counter for a field\r\n\t// becomes equal to `0` it's still not destroyed,\r\n\t// because theoretically it could be a new field\r\n\t// being added in the beginning of the form\r\n\t// therefore causing all field to unregister and then register again.\r\n\t// If those fields were destroyed then their values would be lost.\r\n\tstate.fields[field]--\r\n}\r\n\r\n// Sets field `value`.\r\n// (e.g. `this.form.set(field, value)`).\r\nexport const setFieldValue = (field, value) => state =>\r\n{\r\n\tstate.values[field] = value\r\n}\r\n\r\n// Sets field externally-set `error`.\r\nexport const setFieldError = (field, error) => state =>\r\n{\r\n\tstate.errors[field] = error\r\n\tstate.showErrors[field] = Boolean(state.validationErrors[field] || state.errors[field])\r\n}\r\n\r\n// Sets field validation `error`.\r\nexport const setFieldValidationError = (field, error) => state =>\r\n{\r\n\tstate.validationErrors[field] = error\r\n\tstate.showErrors[field] = Boolean(state.validationErrors[field] || state.errors[field])\r\n}\r\n\r\nexport const fieldFocused = (field) => state =>\r\n{\r\n\tstate.latestFocusedField = field\r\n}\r\n\r\nexport const setFormSubmitting = (submitting) => state =>\r\n{\r\n\tstate.submitting = submitting\r\n}\r\n\r\nexport const showFieldError = (field) => state =>\r\n{\r\n\tstate.showErrors[field] = true\r\n}\r\n\r\nexport const removeField = (field) => state => {\r\n\tdelete state.fields[field]\r\n\tdelete state.values[field]\r\n\tdelete state.errors[field]\r\n\tdelete state.validationErrors[field]\r\n\tdelete state.showErrors[field]\r\n\tif (state.latestFocusedField === field) {\r\n\t\tstate.latestFocusedField = undefined\r\n\t}\r\n}"]}