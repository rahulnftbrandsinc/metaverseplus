'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OnAbandonPlugin = function () {
	function OnAbandonPlugin(getProps, getState) {
		var _this = this;

		_classCallCheck(this, OnAbandonPlugin);

		this.onLeaveForm = function () {
			var _getProps = _this.getProps(),
			    onAbandon = _getProps.onAbandon;

			// If the form is already submitted
			// then it's not abandoned.


			if (_this.submitted) {
				return;
			}

			// Get the latest focused form field
			var field = _this.getState().latestFocusedField;

			// If no form field was ever focused
			// then the form is not being abandoned.
			if (!field) {
				return;
			}

			onAbandon(field, _this.getState().values[field]);
		};

		this.getProps = getProps;
		this.getState = getState;
		this.onReset();
	}

	_createClass(OnAbandonPlugin, [{
		key: 'onMount',
		value: function onMount() {
			var _getProps2 = this.getProps(),
			    onAbandon = _getProps2.onAbandon;

			if (!onAbandon) {
				return;
			}
			// Report abandoned form on page close.
			// (though it might not have time sufficient to report anything)
			window.addEventListener('beforeunload', this.onLeaveForm);
		}
	}, {
		key: 'onUnmount',
		value: function onUnmount() {
			var _getProps3 = this.getProps(),
			    onAbandon = _getProps3.onAbandon;

			if (!onAbandon) {
				return;
			}
			window.removeEventListener('beforeunload', this.onLeaveForm);
			this.onLeaveForm();
		}
	}, {
		key: 'onAfterSubmit',
		value: function onAfterSubmit() {
			this.submitted = true;
		}
	}, {
		key: 'onReset',
		value: function onReset() {
			this.submitted = undefined;
		}
	}]);

	return OnAbandonPlugin;
}();

exports.default = OnAbandonPlugin;
//# sourceMappingURL=OnAbandonPlugin.js.map