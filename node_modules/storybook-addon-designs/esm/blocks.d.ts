/** @jsx jsx */
import { CSSProperties, FC } from 'react';
import * as config from './config';
export interface BlocksCommonProps {
    /**
     * **Doc Block Props**
     *
     * A `class` prop passed down to embed wrapper.
     */
    className?: string;
    /**
     * **Doc Block Props**
     *
     * A `style` passed down to embed wrapper.
     */
    style?: CSSProperties;
    /**
     * **Doc Block Props**
     *
     * Height of the block. Numbers will be converted into pixels.
     * Relative value (%) is based on width of the block.
     */
    height?: string | number;
    /**
     * **Doc Block Props**
     *
     * Whether to allow the block to toggle collapse/expand.
     * @default true
     */
    collapsable?: boolean;
    /**
     * **Doc Block Props**
     *
     * Render the block with collapsed initially?
     * Available when `collapsable` is set to `true`.
     * @default false
     */
    defaultCollapsed?: boolean;
    /**
     * **Doc Block Props**
     *
     * Placeholder text shown when the block is collapsed.
     * Default value differs by a type of the block (e.g. "Design (Figma)").
     */
    placeholder?: string;
    /**
     * **Doc Block Props**
     *
     * Whether to show an "Open in new tab" button.
     * @default true
     */
    showLink?: boolean;
}
export declare const DocBlockBase: FC<BlocksCommonProps>;
export declare const Figma: FC<Omit<config.FigmaConfig, 'type'> & BlocksCommonProps>;
export declare const IFrame: FC<Omit<config.IFrameConfig, 'type'> & BlocksCommonProps>;
export declare const Image: FC<Omit<config.ImageConfig, 'type'> & BlocksCommonProps>;
export declare const PDF: FC<Omit<config.PdfConfig, 'type'> & BlocksCommonProps>;
export interface DesignProps {
    /**
     * An ID of the story that has `design` parameter to use for rendering.
     */
    storyId: string;
}
export declare const Design: FC<DesignProps & Omit<BlocksCommonProps, 'showLink'>>;
