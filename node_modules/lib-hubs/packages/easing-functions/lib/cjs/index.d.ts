export declare type EasingFunction = (k: number) => number;
export declare function linear(k: number): number;
export declare function quadraticIn(k: number): number;
export declare function quadraticOut(k: number): number;
export declare function quadraticInOut(k: number): number;
export declare function cubicIn(k: number): number;
export declare function cubicOut(k: number): number;
export declare function cubicInOut(k: number): number;
export declare function quarticIn(k: number): number;
export declare function quarticOut(k: number): number;
export declare function quarticInOut(k: number): number;
export declare function quinticIn(k: number): number;
export declare function quinticOut(k: number): number;
export declare function quinticInOut(k: number): number;
export declare function sinusoidalIn(k: number): number;
export declare function sinusoidalOut(k: number): number;
export declare function sinusoidalInOut(k: number): number;
export declare function exponentialIn(k: number): number;
export declare function exponentialOut(k: number): number;
export declare function exponentialInOut(k: number): number;
export declare function circularIn(k: number): number;
export declare function circularOut(k: number): number;
export declare function circularInOut(k: number): number;
export declare function elasticIn(k: number): number;
export declare function elasticOut(k: number): number;
export declare function elasticInOut(k: number): number;
export declare function backIn(k: number): number;
export declare function backOut(k: number): number;
export declare function backInOut(k: number): number;
export declare function bounceIn(k: number): number;
export declare function bounceOut(k: number): number;
export declare function bounceInOut(k: number): number;
