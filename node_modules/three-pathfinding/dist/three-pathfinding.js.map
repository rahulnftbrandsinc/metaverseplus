{"version":3,"file":"three-pathfinding.js","sources":["../src/Utils.js","../src/BinaryHeap.js","../src/AStar.js","../src/Builder.js","../src/Channel.js","../src/Pathfinding.js","../src/PathfindingHelper.js"],"sourcesContent":["class Utils {\n\n  static computeCentroids (geometry) {\n    var f, fl, face;\n\n    for ( f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\n\n      face = geometry.faces[ f ];\n      face.centroid = new THREE.Vector3( 0, 0, 0 );\n\n      face.centroid.add( geometry.vertices[ face.a ] );\n      face.centroid.add( geometry.vertices[ face.b ] );\n      face.centroid.add( geometry.vertices[ face.c ] );\n      face.centroid.divideScalar( 3 );\n\n    }\n  }\n\n  static roundNumber (value, decimals) {\n    return Number(value.toFixed(decimals));\n  }\n\n  static sample (list) {\n    return list[Math.floor(Math.random() * list.length)];\n  }\n\n  static mergeVertexIds (aList, bList) {\n\n    var sharedVertices = [];\n\n    aList.forEach((vID) => {\n      if (bList.indexOf(vID) >= 0) {\n        sharedVertices.push(vID);\n      }\n    });\n\n    if (sharedVertices.length < 2) return [];\n\n    if (sharedVertices.includes(aList[0]) && sharedVertices.includes(aList[aList.length - 1])) {\n      // Vertices on both edges are bad, so shift them once to the left\n      aList.push(aList.shift());\n    }\n\n    if (sharedVertices.includes(bList[0]) && sharedVertices.includes(bList[bList.length - 1])) {\n      // Vertices on both edges are bad, so shift them once to the left\n      bList.push(bList.shift());\n    }\n\n    // Again!\n    sharedVertices = [];\n\n    aList.forEach((vId) => {\n      if (bList.includes(vId)) {\n        sharedVertices.push(vId);\n      }\n    });\n\n    var clockwiseMostSharedVertex = sharedVertices[1];\n    var counterClockwiseMostSharedVertex = sharedVertices[0];\n\n\n    var cList = aList.slice();\n    while (cList[0] !== clockwiseMostSharedVertex) {\n      cList.push(cList.shift());\n    }\n\n    var c = 0;\n\n    var temp = bList.slice();\n    while (temp[0] !== counterClockwiseMostSharedVertex) {\n      temp.push(temp.shift());\n\n      if (c++ > 10) throw new Error('Unexpected state');\n    }\n\n    // Shave\n    temp.shift();\n    temp.pop();\n\n    cList = cList.concat(temp);\n\n    return cList;\n  }\n\n  static setPolygonCentroid (polygon, navigationMesh) {\n    var sum = new THREE.Vector3();\n\n    var vertices = navigationMesh.vertices;\n\n    polygon.vertexIds.forEach((vId) => {\n      sum.add(vertices[vId]);\n    });\n\n    sum.divideScalar(polygon.vertexIds.length);\n\n    polygon.centroid.copy(sum);\n  }\n\n  static cleanPolygon (polygon, navigationMesh) {\n\n    var newVertexIds = [];\n\n    var vertices = navigationMesh.vertices;\n\n    for (var i = 0; i < polygon.vertexIds.length; i++) {\n\n      var vertex = vertices[polygon.vertexIds[i]];\n\n      var nextVertexId, previousVertexId;\n      var nextVertex, previousVertex;\n\n      if (i === 0) {\n        nextVertexId = polygon.vertexIds[1];\n        previousVertexId = polygon.vertexIds[polygon.vertexIds.length - 1];\n      } else if (i === polygon.vertexIds.length - 1) {\n        nextVertexId = polygon.vertexIds[0];\n        previousVertexId = polygon.vertexIds[polygon.vertexIds.length - 2];\n      } else {\n        nextVertexId = polygon.vertexIds[i + 1];\n        previousVertexId = polygon.vertexIds[i - 1];\n      }\n\n      nextVertex = vertices[nextVertexId];\n      previousVertex = vertices[previousVertexId];\n\n      var a = nextVertex.clone().sub(vertex);\n      var b = previousVertex.clone().sub(vertex);\n\n      var angle = a.angleTo(b);\n\n      if (angle > Math.PI - 0.01 && angle < Math.PI + 0.01) {\n\n        // Remove the neighbours who had this vertex\n        var goodNeighbours = [];\n        polygon.neighbours.forEach((neighbour) => {\n          if (!neighbour.vertexIds.includes(polygon.vertexIds[i])) {\n            goodNeighbours.push(neighbour);\n          }\n        });\n        polygon.neighbours = goodNeighbours;\n\n\n        // TODO cleanup the list of vertices and rebuild vertexIds for all polygons\n      } else {\n        newVertexIds.push(polygon.vertexIds[i]);\n      }\n\n    }\n\n    polygon.vertexIds = newVertexIds;\n\n    this.setPolygonCentroid(polygon, navigationMesh);\n\n  }\n\n  static isConvex (polygon, navigationMesh) {\n\n    var vertices = navigationMesh.vertices;\n\n    if (polygon.vertexIds.length < 3) return false;\n\n    var convex = true;\n\n    var total = 0;\n\n    var results = [];\n\n    for (var i = 0; i < polygon.vertexIds.length; i++) {\n\n      var vertex = vertices[polygon.vertexIds[i]];\n\n      var nextVertex, previousVertex;\n\n      if (i === 0) {\n        nextVertex = vertices[polygon.vertexIds[1]];\n        previousVertex = vertices[polygon.vertexIds[polygon.vertexIds.length - 1]];\n      } else if (i === polygon.vertexIds.length - 1) {\n        nextVertex = vertices[polygon.vertexIds[0]];\n        previousVertex = vertices[polygon.vertexIds[polygon.vertexIds.length - 2]];\n      } else {\n        nextVertex = vertices[polygon.vertexIds[i + 1]];\n        previousVertex = vertices[polygon.vertexIds[i - 1]];\n      }\n\n      var a = nextVertex.clone().sub(vertex);\n      var b = previousVertex.clone().sub(vertex);\n\n      var angle = a.angleTo(b);\n      total += angle;\n\n      if (angle === Math.PI || angle === 0) return false;\n\n      var r = a.cross(b).y;\n      results.push(r);\n    }\n\n    // if ( total > (polygon.vertexIds.length-2)*Math.PI ) return false;\n\n    results.forEach((r) => {\n      if (r === 0) convex = false;\n    });\n\n    if (results[0] > 0) {\n      results.forEach((r) => {\n        if (r < 0) convex = false;\n      });\n    } else {\n      results.forEach((r) => {\n        if (r > 0) convex = false;\n      });\n    }\n\n    return convex;\n  }\n\n  static distanceToSquared (a, b) {\n\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    var dz = a.z - b.z;\n\n    return dx * dx + dy * dy + dz * dz;\n\n  }\n\n  //+ Jonas Raoni Soares Silva\n  //@ http://jsfromhell.com/math/is-point-in-poly [rev. #0]\n  static isPointInPoly (poly, pt) {\n    for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\n      ((poly[i].z <= pt.z && pt.z < poly[j].z) || (poly[j].z <= pt.z && pt.z < poly[i].z)) && (pt.x < (poly[j].x - poly[i].x) * (pt.z - poly[i].z) / (poly[j].z - poly[i].z) + poly[i].x) && (c = !c);\n    return c;\n  }\n\n  static isVectorInPolygon (vector, polygon, vertices) {\n\n    // reference point will be the centroid of the polygon\n    // We need to rotate the vector as well as all the points which the polygon uses\n\n    var lowestPoint = 100000;\n    var highestPoint = -100000;\n\n    var polygonVertices = [];\n\n    polygon.vertexIds.forEach((vId) => {\n      lowestPoint = Math.min(vertices[vId].y, lowestPoint);\n      highestPoint = Math.max(vertices[vId].y, highestPoint);\n      polygonVertices.push(vertices[vId]);\n    });\n\n    if (vector.y < highestPoint + 0.5 && vector.y > lowestPoint - 0.5 &&\n      this.isPointInPoly(polygonVertices, vector)) {\n      return true;\n    }\n    return false;\n  }\n\n  static triarea2 (a, b, c) {\n    var ax = b.x - a.x;\n    var az = b.z - a.z;\n    var bx = c.x - a.x;\n    var bz = c.z - a.z;\n    return bx * az - ax * bz;\n  }\n\n  static vequal (a, b) {\n    return this.distanceToSquared(a, b) < 0.00001;\n  }\n}\n\nexport { Utils };\n","// javascript-astar\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a binary heap.\n\nclass BinaryHeap {\n  constructor (scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push (element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  }\n\n  pop () {\n    // Store the first element so we can return it later.\n    const result = this.content[0];\n    // Get the element at the end of the array.\n    const end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  }\n\n  remove (node) {\n    const i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    const end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  }\n\n  size () {\n    return this.content.length;\n  }\n\n  rescoreElement (node) {\n    this.sinkDown(this.content.indexOf(node));\n  }\n\n  sinkDown (n) {\n    // Fetch the element that has to be sunk.\n    const element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = ((n + 1) >> 1) - 1;\n      const parent = this.content[parentN];\n\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        // Swap the elements if the parent is greater.\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to sink any further.\n        break;\n      }\n    }\n  }\n\n  bubbleUp (n) {\n    // Look up the target element and its score.\n    const length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      const child2N = (n + 1) << 1,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      let swap = null;\n      let child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        const child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        const child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n\n}\n\nexport { BinaryHeap };\n","import { BinaryHeap } from './BinaryHeap';\nimport { Utils } from './Utils.js';\n\nclass AStar {\n  static init (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      //for(var x in graph) {\n      const node = graph[x];\n      node.f = 0;\n      node.g = 0;\n      node.h = 0;\n      node.cost = 1.0;\n      node.visited = false;\n      node.closed = false;\n      node.parent = null;\n    }\n  }\n\n  static cleanUp (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      const node = graph[x];\n      delete node.f;\n      delete node.g;\n      delete node.h;\n      delete node.cost;\n      delete node.visited;\n      delete node.closed;\n      delete node.parent;\n    }\n  }\n\n  static heap () {\n    return new BinaryHeap(function (node) {\n      return node.f;\n    });\n  }\n\n  static search (graph, start, end) {\n    this.init(graph);\n    //heuristic = heuristic || astar.manhattan;\n\n\n    const openHeap = this.heap();\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      const currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        let curr = currentNode;\n        const ret = [];\n        while (curr.parent) {\n          ret.push(curr);\n          curr = curr.parent;\n        }\n        this.cleanUp(ret);\n        return ret.reverse();\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbours.\n      currentNode.closed = true;\n\n      // Find all neighbours for the current node. Optionally find diagonal neighbours as well (false by default).\n      const neighbours = this.neighbours(graph, currentNode);\n\n      for (let i = 0, il = neighbours.length; i < il; i++) {\n        const neighbour = neighbours[i];\n\n        if (neighbour.closed) {\n          // Not a valid node to process, skip to next neighbour.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbour is the shortest one we have seen yet.\n        const gScore = currentNode.g + neighbour.cost;\n        const beenVisited = neighbour.visited;\n\n        if (!beenVisited || gScore < neighbour.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbour.visited = true;\n          neighbour.parent = currentNode;\n          if (!neighbour.centroid || !end.centroid) throw new Error('Unexpected state');\n          neighbour.h = neighbour.h || this.heuristic(neighbour.centroid, end.centroid);\n          neighbour.g = gScore;\n          neighbour.f = neighbour.g + neighbour.h;\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbour);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbour);\n          }\n        }\n      }\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  }\n\n  static heuristic (pos1, pos2) {\n    return Utils.distanceToSquared(pos1, pos2);\n  }\n\n  static neighbours (graph, node) {\n    const ret = [];\n\n    for (let e = 0; e < node.neighbours.length; e++) {\n      ret.push(graph[node.neighbours[e]]);\n    }\n\n    return ret;\n  }\n}\n\nexport { AStar };\n","import { Utils } from './Utils';\n\nlet polygonId = 1;\n\nclass Builder {\n  /**\n   * Constructs groups from the given navigation mesh.\n   * @param  {THREE.Geometry} geometry\n   * @return {Zone}\n   */\n  static buildZone (geometry) {\n\n    const navMesh = this._buildNavigationMesh(geometry);\n\n    const zone = {};\n\n    zone.vertices = navMesh.vertices;\n\n    const groups = this._buildPolygonGroups(navMesh);\n\n    // TODO: This block represents a large portion of navigation mesh construction time\n    // and could probably be optimized. For example, construct portals while\n    // determining the neighbor graph.\n    zone.groups = new Array(groups.length);\n    groups.forEach((group, groupIndex) => {\n\n      const indexByPolygonId = {};\n      group.forEach((poly, polyIndex) => { indexByPolygonId[poly.id] = polyIndex; });\n\n      const newGroup = new Array(group.length);\n      group.forEach((poly, polyIndex) => {\n\n        const neighbourIndices = [];\n        poly.neighbours.forEach((n) => neighbourIndices.push(indexByPolygonId[n.id]));\n\n        // Build a portal list to each neighbour\n        const portals = [];\n        poly.neighbours.forEach((n) => portals.push(this._getSharedVerticesInOrder(poly, n)));\n\n        newGroup[polyIndex] = {\n          id: polyIndex,\n          neighbours: neighbourIndices,\n          vertexIds: poly.vertexIds,\n          centroid: poly.centroid,\n          portals: portals\n        };\n      });\n\n      zone.groups[groupIndex] = newGroup;\n    });\n\n    return zone;\n  }\n\n  /**\n   * Constructs a navigation mesh from the given geometry.\n   * @param {THREE.Geometry} geometry\n   * @return {Object}\n   */\n  static _buildNavigationMesh (geometry) {\n    Utils.computeCentroids(geometry);\n    geometry.mergeVertices();\n    return this._buildPolygonsFromGeometry(geometry);\n  }\n\n  static _buildPolygonGroups (navigationMesh) {\n\n    const polygons = navigationMesh.polygons;\n\n    const polygonGroups = [];\n\n    const spreadGroupId = function (polygon) {\n      polygon.neighbours.forEach((neighbour) => {\n        if (neighbour.group === undefined) {\n          neighbour.group = polygon.group;\n          spreadGroupId(neighbour);\n        }\n      });\n    };\n\n    polygons.forEach((polygon) => {\n      if (polygon.group !== undefined) {\n        // this polygon is already part of a group\n        polygonGroups[polygon.group].push(polygon);\n      } else {\n        // we need to make a new group and spread its ID to neighbors\n        polygon.group = polygonGroups.length;\n        spreadGroupId(polygon);\n        polygonGroups.push([polygon]);\n      }\n    });\n\n    return polygonGroups;\n  }\n\n  static _buildPolygonNeighbours (polygon, vertexPolygonMap) {\n    const neighbours = new Set();\n\n    const groupA = vertexPolygonMap[polygon.vertexIds[0]];\n    const groupB = vertexPolygonMap[polygon.vertexIds[1]];\n    const groupC = vertexPolygonMap[polygon.vertexIds[2]];\n\n    // It's only necessary to iterate groups A and B. Polygons contained only\n    // in group C cannot share a >1 vertex with this polygon.\n    // IMPORTANT: Bublé cannot compile for-of loops.\n    groupA.forEach((candidate) => {\n      if (candidate === polygon) return;\n      if (groupB.includes(candidate) || groupC.includes(candidate)) {\n        neighbours.add(candidate);\n      }\n    });\n    groupB.forEach((candidate) => {\n      if (candidate === polygon) return;\n      if (groupC.includes(candidate)) {\n        neighbours.add(candidate);\n      }\n    });\n\n    return neighbours;\n  }\n\n  static _buildPolygonsFromGeometry (geometry) {\n\n    const polygons = [];\n    const vertices = geometry.vertices;\n    const faceVertexUvs = geometry.faceVertexUvs;\n\n    // Constructing the neighbor graph brute force is O(n²). To avoid that,\n    // create a map from vertices to the polygons that contain them, and use it\n    // while connecting polygons. This reduces complexity to O(n*m), where 'm'\n    // is related to connectivity of the mesh.\n    const vertexPolygonMap = new Array(vertices.length); // array of polygon objects by vertex index\n    for (let i = 0; i < vertices.length; i++) {\n      vertexPolygonMap[i] = [];\n    }\n\n    // Convert the faces into a custom format that supports more than 3 vertices\n    geometry.faces.forEach((face) => {\n      const poly = {\n        id: polygonId++,\n        vertexIds: [face.a, face.b, face.c],\n        centroid: face.centroid,\n        normal: face.normal,\n        neighbours: null\n      };\n      polygons.push(poly);\n      vertexPolygonMap[face.a].push(poly);\n      vertexPolygonMap[face.b].push(poly);\n      vertexPolygonMap[face.c].push(poly);\n    });\n\n    // Build a list of adjacent polygons\n    polygons.forEach((polygon) => {\n      polygon.neighbours = this._buildPolygonNeighbours(polygon, vertexPolygonMap);\n    });\n\n    return {\n      polygons: polygons,\n      vertices: vertices,\n      faceVertexUvs: faceVertexUvs\n    };\n  }\n\n  static _getSharedVerticesInOrder (a, b) {\n\n    const aList = a.vertexIds;\n    const bList = b.vertexIds;\n\n    const sharedVertices = new Set();\n\n    aList.forEach((vId) => {\n      if (bList.includes(vId)) {\n        sharedVertices.add(vId);\n      }\n    });\n\n    if (sharedVertices.size < 2) return [];\n\n    if (sharedVertices.has(aList[0]) && sharedVertices.has(aList[aList.length - 1])) {\n      // Vertices on both edges are bad, so shift them once to the left\n      aList.push(aList.shift());\n    }\n\n    if (sharedVertices.has(bList[0]) && sharedVertices.has(bList[bList.length - 1])) {\n      // Vertices on both edges are bad, so shift them once to the left\n      bList.push(bList.shift());\n    }\n\n    // Again!\n    const sharedVerticesOrdered = [];\n\n    aList.forEach((vId) => {\n      if (bList.includes(vId)) {\n        sharedVerticesOrdered.push(vId);\n      }\n    });\n\n    return sharedVerticesOrdered;\n  }\n}\n\nexport { Builder };\n","import { Utils } from './Utils';\n\nclass Channel {\n  constructor () {\n    this.portals = [];\n  }\n\n  push (p1, p2) {\n    if (p2 === undefined) p2 = p1;\n    this.portals.push({\n      left: p1,\n      right: p2\n    });\n  }\n\n  stringPull () {\n    const portals = this.portals;\n    const pts = [];\n    // Init scan state\n    let portalApex, portalLeft, portalRight;\n    let apexIndex = 0,\n      leftIndex = 0,\n      rightIndex = 0;\n\n    portalApex = portals[0].left;\n    portalLeft = portals[0].left;\n    portalRight = portals[0].right;\n\n    // Add start point.\n    pts.push(portalApex);\n\n    for (let i = 1; i < portals.length; i++) {\n      const left = portals[i].left;\n      const right = portals[i].right;\n\n      // Update right vertex.\n      if (Utils.triarea2(portalApex, portalRight, right) <= 0.0) {\n        if (Utils.vequal(portalApex, portalRight) || Utils.triarea2(portalApex, portalLeft, right) > 0.0) {\n          // Tighten the funnel.\n          portalRight = right;\n          rightIndex = i;\n        } else {\n          // Right over left, insert left to path and restart scan from portal left point.\n          pts.push(portalLeft);\n          // Make current left the new apex.\n          portalApex = portalLeft;\n          apexIndex = leftIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n\n      // Update left vertex.\n      if (Utils.triarea2(portalApex, portalLeft, left) >= 0.0) {\n        if (Utils.vequal(portalApex, portalLeft) || Utils.triarea2(portalApex, portalRight, left) < 0.0) {\n          // Tighten the funnel.\n          portalLeft = left;\n          leftIndex = i;\n        } else {\n          // Left over right, insert right to path and restart scan from portal right point.\n          pts.push(portalRight);\n          // Make current right the new apex.\n          portalApex = portalRight;\n          apexIndex = rightIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n    }\n\n    if ((pts.length === 0) || (!Utils.vequal(pts[pts.length - 1], portals[portals.length - 1].left))) {\n      // Append last point to path.\n      pts.push(portals[portals.length - 1].left);\n    }\n\n    this.path = pts;\n    return pts;\n  }\n}\n\nexport { Channel };\n","/* global THREE */\n\nimport { Utils } from './Utils';\nimport { AStar } from './AStar';\nimport { Builder } from './Builder';\nimport { Channel } from './Channel';\n\n/**\n * Defines an instance of the pathfinding module, with one or more zones.\n */\nclass Pathfinding {\n\tconstructor () {\n\t\tthis.zones = {};\n\t}\n\n\t/**\n\t * (Static) Builds a zone/node set from navigation mesh geometry.\n\t * @param  {THREE.BufferGeometry} geometry\n\t * @return {Zone}\n\t */\n\tstatic createZone (geometry) {\n\t\tif ( geometry.isGeometry ) {\n\t\t\t// Haven't actually implemented support for BufferGeometry yet, but Geometry is somewhat\n\t\t\t// not-recommended these days, so go ahead and start warning.\n\t\t\tconsole.warn('[three-pathfinding]: Use THREE.BufferGeometry, not THREE.Geometry, to create zone.');\n\t\t} else {\n\t\t\tgeometry = new THREE.Geometry().fromBufferGeometry(geometry);\n\t\t}\n\n\t\treturn Builder.buildZone(geometry);\n\t}\n\n\t/**\n\t * Sets data for the given zone.\n\t * @param {string} zoneID\n\t * @param {Zone} zone\n\t */\n\tsetZoneData (zoneID, zone) {\n\t\tthis.zones[zoneID] = zone;\n\t}\n\n\t/**\n\t * Returns a random node within a given range of a given position.\n\t * @param  {string} zoneID\n\t * @param  {number} groupID\n\t * @param  {THREE.Vector3} nearPosition\n\t * @param  {number} nearRange\n\t * @return {Node}\n\t */\n\tgetRandomNode (zoneID, groupID, nearPosition, nearRange) {\n\n\t\tif (!this.zones[zoneID]) return new THREE.Vector3();\n\n\t\tnearPosition = nearPosition || null;\n\t\tnearRange = nearRange || 0;\n\n\t\tconst candidates = [];\n\t\tconst polygons = this.zones[zoneID].groups[groupID];\n\n\t\tpolygons.forEach((p) => {\n\t\t\tif (nearPosition && nearRange) {\n\t\t\t\tif (Utils.distanceToSquared(nearPosition, p.centroid) < nearRange * nearRange) {\n\t\t\t\t\tcandidates.push(p.centroid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcandidates.push(p.centroid);\n\t\t\t}\n\t\t});\n\n\t\treturn Utils.sample(candidates) || new THREE.Vector3();\n\t}\n\n\t/**\n\t * Returns the closest node to the target position.\n\t * @param  {THREE.Vector3} position\n\t * @param  {string}  zoneID\n\t * @param  {number}  groupID\n\t * @param  {boolean} checkPolygon\n\t * @return {Node}\n\t */\n\tgetClosestNode (position, zoneID, groupID, checkPolygon = false) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tlet closestNode = null;\n\t\tlet closestDistance = Infinity;\n\n\t\tnodes.forEach((node) => {\n\t\t\tconst distance = Utils.distanceToSquared(node.centroid, position);\n\t\t\tif (distance < closestDistance\n\t\t\t\t\t&& (!checkPolygon || Utils.isVectorInPolygon(position, node, vertices))) {\n\t\t\t\tclosestNode = node;\n\t\t\t\tclosestDistance = distance;\n\t\t\t}\n\t\t});\n\n\t\treturn closestNode;\n\t}\n\n\t/**\n\t * Returns a path between given start and end points. If a complete path\n\t * cannot be found, will return the nearest endpoint available.\n\t *\n\t * @param  {THREE.Vector3} startPosition Start position.\n\t * @param  {THREE.Vector3} targetPosition Destination.\n\t * @param  {string} zoneID ID of current zone.\n\t * @param  {number} groupID Current group ID.\n\t * @return {Array<THREE.Vector3>} Array of points defining the path.\n\t */\n\tfindPath (startPosition, targetPosition, zoneID, groupID) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\n\t\tconst closestNode = this.getClosestNode(startPosition, zoneID, groupID, true);\n\t\tconst farthestNode = this.getClosestNode(targetPosition, zoneID, groupID, true);\n\n\t\t// If we can't find any node, just go straight to the target\n\t\tif (!closestNode || !farthestNode) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst paths = AStar.search(nodes, closestNode, farthestNode);\n\n\t\tconst getPortalFromTo = function (a, b) {\n\t\t\tfor (var i = 0; i < a.neighbours.length; i++) {\n\t\t\t\tif (a.neighbours[i] === b.id) {\n\t\t\t\t\treturn a.portals[i];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// We have the corridor, now pull the rope.\n\t\tconst channel = new Channel();\n\t\tchannel.push(startPosition);\n\t\tfor (let i = 0; i < paths.length; i++) {\n\t\t\tconst polygon = paths[i];\n\t\t\tconst nextPolygon = paths[i + 1];\n\n\t\t\tif (nextPolygon) {\n\t\t\t\tconst portals = getPortalFromTo(polygon, nextPolygon);\n\t\t\t\tchannel.push(\n\t\t\t\t\tvertices[portals[0]],\n\t\t\t\t\tvertices[portals[1]]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tchannel.push(targetPosition);\n\t\tchannel.stringPull();\n\n\t\t// Return the path, omitting first position (which is already known).\n\t\tconst path = channel.path.map((c) => new THREE.Vector3(c.x, c.y, c.z));\n\t\tpath.shift();\n\t\treturn path;\n\t}\n}\n\n/**\n * Returns closest node group ID for given position.\n * @param  {string} zoneID\n * @param  {THREE.Vector3} position\n * @return {number}\n */\nPathfinding.prototype.getGroup = (function() {\n\tconst plane = new THREE.Plane();\n\treturn function (zoneID, position, checkPolygon = false) {\n\t\tif (!this.zones[zoneID]) return null;\n\n\t\tlet closestNodeGroup = null;\n\t\tlet distance = Math.pow(50, 2);\n\t\tconst zone = this.zones[zoneID];\n\n\t\tfor (let i = 0; i < zone.groups.length; i++) {\n\t\t\tconst group = zone.groups[i];\n\t\t\tfor (const node of group) {\n\t\t\t\tif (checkPolygon) {\n\t\t\t\t\tplane.setFromCoplanarPoints(\n\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\n\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\n\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\n\t\t\t\t\t);\n\t\t\t\t\tif (Math.abs(plane.distanceToPoint(position)) < 0.01) {\n\t\t\t\t\t\tconst poly = [\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\n\t\t\t\t\t\t];\n\t\t\t\t\t\tif(Utils.isPointInPoly(poly, position)) {\n\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst measuredDistance = Utils.distanceToSquared(node.centroid, position);\n\t\t\t\tif (measuredDistance < distance) {\n\t\t\t\t\tclosestNodeGroup = i;\n\t\t\t\t\tdistance = measuredDistance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn closestNodeGroup;\n\t};\n}());\n\n/**\n * Clamps a step along the navmesh, given start and desired endpoint. May be\n * used to constrain first-person / WASD controls.\n *\n * @param  {THREE.Vector3} start\n * @param  {THREE.Vector3} end Desired endpoint.\n * @param  {Node} node\n * @param  {string} zoneID\n * @param  {number} groupID\n * @param  {THREE.Vector3} endTarget Updated endpoint.\n * @return {Node} Updated node.\n */\nPathfinding.prototype.clampStep = (function () {\n\tconst point = new THREE.Vector3();\n\tconst plane = new THREE.Plane();\n\tconst triangle = new THREE.Triangle();\n\n\tconst endPoint = new THREE.Vector3();\n\n\tlet closestNode;\n\tlet closestPoint = new THREE.Vector3();\n\tlet closestDistance;\n\n\treturn function (startRef, endRef, node, zoneID, groupID, endTarget) {\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\n\t\tconst nodeQueue = [node];\n\t\tconst nodeDepth = {};\n\t\tnodeDepth[node.id] = 0;\n\n\t\tclosestNode = undefined;\n\t\tclosestPoint.set(0, 0, 0);\n\t\tclosestDistance = Infinity;\n\n\t\t// Project the step along the current node.\n\t\tplane.setFromCoplanarPoints(\n\t\t\tvertices[node.vertexIds[0]],\n\t\t\tvertices[node.vertexIds[1]],\n\t\t\tvertices[node.vertexIds[2]]\n\t\t);\n\t\tplane.projectPoint(endRef, point);\n\t\tendPoint.copy(point);\n\n\t\tfor (let currentNode = nodeQueue.pop(); currentNode; currentNode = nodeQueue.pop()) {\n\n\t\t\ttriangle.set(\n\t\t\t\tvertices[currentNode.vertexIds[0]],\n\t\t\t\tvertices[currentNode.vertexIds[1]],\n\t\t\t\tvertices[currentNode.vertexIds[2]]\n\t\t\t);\n\n\t\t\ttriangle.closestPointToPoint(endPoint, point);\n\n\t\t\tif (point.distanceToSquared(endPoint) < closestDistance) {\n\t\t\t\tclosestNode = currentNode;\n\t\t\t\tclosestPoint.copy(point);\n\t\t\t\tclosestDistance = point.distanceToSquared(endPoint);\n\t\t\t}\n\n\t\t\tconst depth = nodeDepth[currentNode];\n\t\t\tif (depth > 2) continue;\n\n\t\t\tfor (let i = 0; i < currentNode.neighbours.length; i++) {\n\t\t\t\tconst neighbour = nodes[currentNode.neighbours[i]];\n\t\t\t\tif (neighbour.id in nodeDepth) continue;\n\n\t\t\t\tnodeQueue.push(neighbour);\n\t\t\t\tnodeDepth[neighbour.id] = depth + 1;\n\t\t\t}\n\t\t}\n\n\t\tendTarget.copy(closestPoint);\n\t\treturn closestNode;\n\t};\n}());\n\n/**\n * Defines a zone of interconnected groups on a navigation mesh.\n *\n * @type {Object}\n * @property {Array<Group>} groups\n * @property {Array<THREE.Vector3} vertices\n */\nconst Zone = {}; // jshint ignore:line\n\n/**\n * Defines a group within a navigation mesh.\n *\n * @type {Object}\n */\nconst Group = {}; // jshint ignore:line\n\n/**\n * Defines a node (or polygon) within a group.\n *\n * @type {Object}\n * @property {number} id\n * @property {Array<number>} neighbours IDs of neighboring nodes.\n * @property {Array<number} vertexIds\n * @property {THREE.Vector3} centroid\n * @property {Array<Array<number>>} portals Array of portals, each defined by two vertex IDs.\n * @property {boolean} closed\n * @property {number} cost\n */\nconst Node = {}; // jshint ignore:line\n\nexport { Pathfinding };\n","/* global THREE */\n\nconst Color = {\n  PLAYER: new THREE.Color( 0xEE836F ).convertGammaToLinear( 2.2 ).getHex(),\n  TARGET: new THREE.Color( 0xDCCB18 ).convertGammaToLinear( 2.2 ).getHex(),\n  PATH: new THREE.Color( 0x00A3AF ).convertGammaToLinear( 2.2 ).getHex(),\n  WAYPOINT: new THREE.Color( 0x00A3AF ).convertGammaToLinear( 2.2 ).getHex(),\n  CLAMPED_STEP: new THREE.Color( 0xDCD3B2 ).convertGammaToLinear( 2.2 ).getHex(),\n  CLOSEST_NODE: new THREE.Color( 0x43676B ).convertGammaToLinear( 2.2 ).getHex(),\n};\n\nconst OFFSET = 0.2;\n\n/**\n * Helper for debugging pathfinding behavior.\n */\nclass PathfindingHelper extends THREE.Object3D {\n  constructor () {\n    super();\n\n    this._playerMarker = new THREE.Mesh(\n      new THREE.SphereGeometry( 0.25, 32, 32 ),\n      new THREE.MeshBasicMaterial( {color: Color.PLAYER} )\n    );\n\n    this._targetMarker = new THREE.Mesh(\n      new THREE.BoxGeometry( 0.3, 0.3, 0.3 ),\n      new THREE.MeshBasicMaterial( {color: Color.TARGET} )\n    );\n    \n\n    this._nodeMarker = new THREE.Mesh(\n      new THREE.BoxGeometry( 0.1, 0.8, 0.1 ),\n      new THREE.MeshBasicMaterial( { color: Color.CLOSEST_NODE } )\n    );\n    \n\n    this._stepMarker = new THREE.Mesh(\n      new THREE.BoxGeometry( 0.1, 1, 0.1 ),\n      new THREE.MeshBasicMaterial( { color: Color.CLAMPED_STEP } )\n    );\n\n    this._pathMarker = new THREE.Object3D();\n\n    this._pathLineMaterial = new THREE.LineBasicMaterial( { color: Color.PATH, linewidth: 2 } ) ;\n    this._pathPointMaterial = new THREE.MeshBasicMaterial( { color: Color.WAYPOINT } );\n    this._pathPointGeometry = new THREE.SphereBufferGeometry( 0.08 );\n\n    this._markers = [\n      this._playerMarker,\n      this._targetMarker,\n      this._nodeMarker,\n      this._stepMarker,\n      this._pathMarker,\n    ];\n\n    this._markers.forEach( ( marker ) => {\n\n      marker.visible = false;\n\n      this.add( marker );\n\n    } );\n\n  }\n\n  /**\n   * @param {Array<THREE.Vector3} path\n   * @return {this}\n   */\n  setPath ( path ) {\n\n    while ( this._pathMarker.children.length ) {\n\n      this._pathMarker.children[ 0 ].visible = false;\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\n\n    }\n\n    path = [ this._playerMarker.position ].concat( path );\n\n    // Draw debug lines\n    const geometry = new THREE.Geometry();\n    for (let i = 0; i < path.length; i++) {\n      geometry.vertices.push( path[ i ].clone().add( new THREE.Vector3( 0, OFFSET, 0 ) ) );\n    }\n    this._pathMarker.add( new THREE.Line( geometry, this._pathLineMaterial ) );\n\n    for ( let i = 0; i < path.length - 1; i++ ) {\n\n      const node = new THREE.Mesh( this._pathPointGeometry, this._pathPointMaterial );\n      node.position.copy( path[ i ] );\n      node.position.y += OFFSET;\n      this._pathMarker.add( node );\n\n    }\n\n    this._pathMarker.visible = true;\n\n    return this;\n\n  }\n\n  /**\n   * @param {THREE.Vector3} position\n   * @return {this}\n   */\n  setPlayerPosition( position ) {\n\n    this._playerMarker.position.copy( position );\n    this._playerMarker.visible = true;\n    return this;\n\n  }\n\n  /**\n   * @param {THREE.Vector3} position\n   * @return {this}\n   */\n  setTargetPosition( position ) {\n\n    this._targetMarker.position.copy( position );\n    this._targetMarker.visible = true;\n    return this;\n\n  }\n\n  /**\n   * @param {THREE.Vector3} position\n   * @return {this}\n   */\n  setNodePosition( position ) {\n\n    this._nodeMarker.position.copy( position );\n    this._nodeMarker.visible = true;\n    return this;\n\n  }\n\n  /**\n   * @param {THREE.Vector3} position\n   * @return {this}\n   */\n  setStepPosition( position ) {\n\n    this._stepMarker.position.copy( position );\n    this._stepMarker.visible = true;\n    return this;\n\n  }\n\n  /**\n   * Hides all markers.\n   * @return {this}\n   */\n  reset () {\n\n    while ( this._pathMarker.children.length ) {\n\n      this._pathMarker.children[ 0 ].visible = false;\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\n\n    }\n\n    this._markers.forEach( ( marker ) => {\n\n      marker.visible = false;\n\n    } );\n\n    return this;\n\n  }\n\n}\n\nexport { PathfindingHelper };\n"],"names":["Utils","computeCentroids","geometry","f","fl","face","faces","length","centroid","THREE","Vector3","add","vertices","a","b","c","divideScalar","roundNumber","value","decimals","Number","toFixed","sample","list","Math","floor","random","mergeVertexIds","aList","bList","sharedVertices","forEach","vID","indexOf","push","includes","shift","vId","clockwiseMostSharedVertex","counterClockwiseMostSharedVertex","cList","slice","temp","Error","pop","concat","setPolygonCentroid","polygon","navigationMesh","sum","vertexIds","copy","cleanPolygon","newVertexIds","i","nextVertexId","previousVertexId","previousVertex","vertex","clone","sub","angle","angleTo","PI","goodNeighbours","neighbours","neighbour","isConvex","convex","results","nextVertex","r","cross","y","distanceToSquared","dx","x","dy","dz","z","isPointInPoly","poly","pt","l","j","isVectorInPolygon","vector","lowestPoint","highestPoint","polygonVertices","min","max","this","triarea2","vequal","BinaryHeap","scoreFunction","content","element","sinkDown","result","end","bubbleUp","remove","node","const","size","rescoreElement","n","parentN","parent","elemScore","child2N","child1N","swap","child1Score","AStar","init","graph","let","g","h","cost","visited","closed","cleanUp","heap","search","start","openHeap","currentNode","curr","ret","reverse","il","gScore","beenVisited","heuristic","pos1","pos2","e","polygonId","Builder","buildZone","navMesh","_buildNavigationMesh","zone","groups","_buildPolygonGroups","Array","group","groupIndex","indexByPolygonId","polyIndex","id","newGroup","neighbourIndices","portals","_getSharedVerticesInOrder","mergeVertices","_buildPolygonsFromGeometry","polygonGroups","spreadGroupId","undefined","polygons","_buildPolygonNeighbours","vertexPolygonMap","Set","groupB","groupC","candidate","faceVertexUvs","normal","has","sharedVerticesOrdered","Channel","p1","p2","stringPull","portalApex","portalLeft","portalRight","pts","apexIndex","leftIndex","rightIndex","left","right","path","plane","Pathfinding","zones","createZone","isGeometry","console","warn","Geometry","fromBufferGeometry","setZoneData","zoneID","getRandomNode","groupID","nearPosition","nearRange","candidates","p","getClosestNode","position","checkPolygon","closestNode","closestDistance","Infinity","distance","findPath","startPosition","targetPosition","nodes","farthestNode","paths","getPortalFromTo","channel","nextPolygon","map","prototype","getGroup","Plane","closestNodeGroup","pow","setFromCoplanarPoints","abs","distanceToPoint","measuredDistance","clampStep","point","triangle","Triangle","endPoint","closestPoint","startRef","endRef","endTarget","nodeQueue","nodeDepth","set","projectPoint","closestPointToPoint","depth","Color","PLAYER","convertGammaToLinear","getHex","TARGET","PATH","WAYPOINT","CLAMPED_STEP","CLOSEST_NODE","PathfindingHelper","super","_playerMarker","Mesh","SphereGeometry","MeshBasicMaterial","color","_targetMarker","BoxGeometry","_nodeMarker","_stepMarker","_pathMarker","Object3D","_pathLineMaterial","LineBasicMaterial","linewidth","_pathPointMaterial","_pathPointGeometry","SphereBufferGeometry","_markers","marker","visible","setPath","children","Line","setPlayerPosition","setTargetPosition","setNodePosition","setStepPosition","reset"],"mappings":"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"}